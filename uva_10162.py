# -*- coding: utf-8 -*-
"""
Authors: Hung-Hsin Chen <chenhh@par.cse.nsysu.edu.tw>
License: GPL v2
status: AC
difficulty: 1

https://uva.onlinejudge.org/external/101/10162.pdf

S = 1**1 + 2**2 + 3**3 + ... + n**n
to get the last digit of S

n=1, S=1, answer: 1
n=2, S=1+4=5, answer: 5
n=3, S=1+4+27=32, answer: 2

1**1 = 1
2**2 = 4
3**3 = 27
4**4 = 256
5**5 = 3125
6**6 = 46656
7**7 = 823543
8**8 = 16777216
9**9 = 387420489
10**10 = 10000000000
11**11 = 285311670611
12**12 = 8916100448256
13**13 = 302875106592253
14**14 = 11112006825558016
15**15 = 437893890380859375
16**16 = 18446744073709551616
17**17 = 827240261886336764177
18**18 = 39346408075296537575424
19**19 = 1978419655660313589123979
20**20 = 104857600000000000000000000
21**21 = 5842587018385982521381124421
22**22 = 341427877364219557396646723584
23**23 = 20880467999847912034355032910567
24**24 = 1333735776850284124449081472843776
25**25 = 88817841970012523233890533447265625
26**26 = 6156119580207157310796674288400203776
27**27 = 443426488243037769948249630619149892803
28**28 = 33145523113253374862572728253364605812736
29**29 = 2567686153161211134561828214731016126483469
30**30 = 205891132094649000000000000000000000000000000

the last digit repeats after n>=20
sequences= [1,4,7,6,5,6,3,6,9,0,1,6,3,6,5,6,7,4,9,0]

base, even in decimal of exponent, odd in decimal of exponent
0, 0 ,0
1, 1, 1
2, 4, 6
3, 7, 3
4, 6, 6
5, 5, 5
6, 6, 6
7, 3, 7
8, 6, 4
9, 9, 9
"""

def main():
    while True:
        # 1 <= n <=2*10**100
        n = input()

        if n  == '0':
            break

if __name__ == '__main__':
    for n in range(1, 31):
        print ("{}**{} = {}".format(n,n, n**n))