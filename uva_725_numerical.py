# -*- coding: utf-8 -*-
"""
Authors: Hung-Hsin Chen <chenhh@par.cse.nsysu.edu.tw>
License: GPL v2

status: AC
difficulty: 1

https://uva.onlinejudge.org/external/7/725.pdf
"""


def division(n: int):
    """
    finds and displays all pairs of 5-digit numbers
    abcde/fghij == N, 2<=N<=79
    The first digit of one of the numerals is allowed to be zero
    """
    start_numerator, end_numerator = 10000 // n, 99999 // n
    if start_numerator < 1000:
        # if numerator < 1000, there will be two leading zeros.
        start_numerator = 1000
    sol = []
    for num in range(start_numerator, end_numerator):
        digits = [False for _ in range(10)]
        denum = num * n
        if num < 10000:
            digits[0] = True
        for c in str(num):
            digits[int(c)] = True
        for c in str(denum):
            digits[int(c)] = True
        if all(digits):
            sol.append((denum, num))
    return sol


def cache(n=range(2, 80)):
    # ans = [}
    # for ndx in n:
    #     ans[ndx] = division(ndx)

    ans = {2: [(13458, 6729), (13584, 6792), (13854, 6927), (14538, 7269),
               (14586, 7293), (14658, 7329), (15384, 7692), (15846, 7923),
               (15864, 7932), (18534, 9267), (18546, 9273), (18654, 9327),
               (26970, 13485), (27096, 13548), (27690, 13845), (29076, 14538),
               (29370, 14685), (29670, 14835), (29706, 14853), (29730, 14865),
               (30972, 15486), (32970, 16485), (37092, 18546), (37290, 18645),
               (41358, 20679), (41538, 20769), (41586, 20793), (46158, 23079),
               (53418, 26709), (53814, 26907), (54138, 27069), (54186, 27093),
               (54618, 27309), (58134, 29067), (58146, 29073), (58614, 29307),
               (61458, 30729), (61584, 30792), (61854, 30927), (62970, 31485),
               (64158, 32079), (65418, 32709), (65814, 32907), (69702, 34851),
               (70296, 35148), (70962, 35481), (76290, 38145), (76902, 38451),
               (90276, 45138), (90372, 45186), (90762, 45381), (92370, 46185),
               (93702, 46851), (96270, 48135), (96702, 48351), (97026, 48513),
               (97032, 48516), (97062, 48531), (97230, 48615), (97302, 48651)],
           3: [(17469, 5823), (17496, 5832), (50382, 16794), (53082, 17694),
               (61749, 20583), (69174, 23058), (91746, 30582), (96174, 32058)],
           4: [(15768, 3942), (17568, 4392), (23184, 5796), (31824, 7956),
               (60948, 15237), (68940, 17235), (69408, 17352), (81576, 20394),
               (81756, 20439), (86940, 21735), (94068, 23517), (94860, 23715)],
           5: [(13485, 2697), (13845, 2769), (14685, 2937), (14835, 2967),
               (14865, 2973), (16485, 3297), (18645, 3729), (31485, 6297),
               (38145, 7629), (46185, 9237), (48135, 9627), (48615, 9723),
               (67290, 13458), (67920, 13584), (69270, 13854), (72690, 14538),
               (72930, 14586), (73290, 14658), (76920, 15384), (79230, 15846),
               (79320, 15864), (92670, 18534), (92730, 18546), (93270, 18654)],
           6: [(17658, 2943), (27918, 4653), (34182, 5697)],
           7: [(16758, 2394), (18459, 2637), (31689, 4527), (36918, 5274),
               (37926, 5418), (41832, 5976), (53298, 7614), (98532, 14076)],
           8: [(25496, 3187), (36712, 4589), (36728, 4591), (37512, 4689),
               (37528, 4691), (38152, 4769), (41896, 5237), (42968, 5371),
               (46312, 5789), (46328, 5791), (46712, 5839), (47136, 5892),
               (47328, 5916), (47368, 5921), (51832, 6479), (53928, 6741),
               (54312, 6789), (54328, 6791), (54712, 6839), (56984, 7123),
               (58496, 7312), (58912, 7364), (59328, 7416), (59368, 7421),
               (63152, 7894), (63528, 7941), (65392, 8174), (65432, 8179),
               (67152, 8394), (67352, 8419), (67512, 8439), (71456, 8932),
               (71536, 8942), (71624, 8953), (71632, 8954), (73248, 9156),
               (73264, 9158), (73456, 9182), (74528, 9316), (74568, 9321),
               (74816, 9352), (75328, 9416), (75368, 9421), (76184, 9523),
               (76248, 9531), (76328, 9541), (83672, 10459), (83752, 10469),
               (84296, 10537), (84632, 10579), (84736, 10592), (85392, 10674),
               (85432, 10679), (85936, 10742), (86352, 10794), (87456, 10932),
               (87536, 10942), (87624, 10953), (87632, 10954), (96584, 12073),
               (98456, 12307), (98760, 12345)],
           9: [(57429, 6381), (58239, 6471), (75249, 8361), (95742, 10638),
               (95823, 10647), (97524, 10836)], 10: [], 11: [],
           12: [(45792, 3816), (73548, 6129), (89532, 7461), (91584, 7632)],
           13: [(67392, 5184), (81549, 6273), (94653, 7281)],
           14: [(25746, 1839), (27384, 1956), (41538, 2967), (46158, 3297),
                (51492, 3678), (54768, 3912), (61572, 4398), (65982, 4713)],
           15: [(27945, 1863), (92745, 6183)],
           16: [(45936, 2871), (73296, 4581), (98352, 6147)],
           17: [(26843, 1579), (28543, 1679), (29546, 1738), (36958, 2174),
                (45713, 2689), (45781, 2693), (54689, 3217), (59126, 3478),
                (64957, 3821), (65297, 3841), (67184, 3952), (67218, 3954),
                (76823, 4519), (76891, 4523), (78132, 4596), (78523, 4619),
                (78591, 4623), (81532, 4796), (83572, 4916), (83657, 4921),
                (89437, 5261), (89471, 5263), (89641, 5273), (91426, 5378),
                (92837, 5461), (92871, 5463), (93126, 5478)],
           18: [(28674, 1593)],
           19: [(51984, 2736), (81567, 4293)], 20: [], 21: [],
           22: [(51678, 2349)],
           23: [(36294, 1578), (81627, 3549), (81972, 3564)],
           24: [(39528, 1647), (46872, 1953)], 25: [],
           26: [(42978, 1653), (56498, 2173), (61854, 2379), (67314, 2589),
                (67418, 2593), (76518, 2943), (82654, 3179), (89726, 3451),
                (92846, 3571)],
           27: [(39852, 1476), (49572, 1836), (69741, 2583), (96714, 3582)],
           28: [(75348, 2691)], 29: [(37584, 1296), (73689, 2541)], 30: [],
           31: [],
           32: [(75168, 2349)], 33: [], 34: [],
           35: [(48265, 1379), (63945, 1827), (64295, 1837), (74865, 2139),
                (93485, 2671)], 36: [], 37: [(65934, 1782)],
           38: [(65892, 1734), (74328, 1956)], 39: [], 40: [], 41: [], 42: [],
           43: [(93654, 2178)],
           44: [(58476, 1329), (59268, 1347), (67892, 1543), (69432, 1578),
                (95348, 2167)], 45: [], 46: [(58374, 1269)], 47: [], 48: [],
           49: [],
           50: [], 51: [], 52: [(95472, 1836)],
           53: [(65879, 1243), (75896, 1432), (84376, 1592), (92538, 1746)],
           54: [],
           55: [], 56: [], 57: [], 58: [], 59: [(73986, 1254)], 60: [], 61: [],
           62: [(79546, 1283), (94736, 1528)], 63: [], 64: [], 65: [],
           66: [(83754, 1269)], 67: [], 68: [(98736, 1452)], 69: [], 70: [],
           71: [],
           72: [], 73: [], 74: [], 75: [], 76: [], 77: [], 78: [], 79: []
           }

    return ans


def main():
    ans = cache()
    case = 0
    while 1:
        n = int(input())
        if not n:
            break
        # out = division(n)
        out = ans[n]
        if case:
            # a blank line between two case
            print()
        case += 1
        if len(out) == 0:
            print('There are no solutions for {}.'.format(n))
        else:
            for denum, num in out:
                print("{:05d} / {:05d} = {}".format(denum, num, n))


if __name__ == '__main__':
    main()
    # division(62)
